
@model IEnumerable<OnlineShoppingManagement.Models.Product>

@{
    ViewBag.Title = "FetchPhone";
}
<div class="container">
    <h2 style="font-size: 28px; font-weight: bold; color: #333; text-transform: uppercase; border-bottom: 2px solid #333; padding-bottom: 10px;">Phones</h2>

    <div class="row">
        <div class="col-md-4">
            <!-- Adjust the column size as per your preference -->
            <div class="form-group">
                <input type="text" class="form-control" id="productFilter" placeholder="Search Product">
            </div>
        </div>
    </div>
    <br />

    <p>
        @Html.ActionLink("Add Product", "Create", null, new { @class = "btn btn-primary" })
    </p>


    <!-- No product found message -->
    <div class="row" id="noProductFoundMessage" style="display: none;">
        <div class="col-md-12 mt-4 text-center">
            <h3>No product found</h3>
        </div>
    </div>


    <table class="table table-bordered table-hover">
        <!-- Table contents remain unchanged -->
        <thead>
            <tr>
                <th>
                    @* @Html.DisplayNameFor(model => model.Name)*@
                    Image
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Price)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.CategoryId)
                </th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @*@Html.DisplayFor(modelItem => item.ImagePath)*@
                        @if (!string.IsNullOrEmpty(item.ImagePath))
                        {
                            <img src="@Url.Content(item.ImagePath)" alt="Product Image" width="70" height="100" />

                        }
                        else
                        {
                            <p>No image available.</p>
                        }
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Description)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CategoryId)
                    </td>
                    <td>
                        @Html.ActionLink("Edit", "Edit", new { id = item.ProductId }, new { @class = "btn btn-primary btn-sm" })
                        @*@Html.ActionLink("Details", "Details", new { id = item.ProductId }, new { @class = "btn btn-info btn-sm" }) *@
                        @Html.ActionLink("Delete", "Delete", new { id = item.ProductId }, new { @class = "btn btn-danger btn-sm", onclick = "confirmAndDelete(this, event);" })
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>




<script>
    // Function to confirm the deletion and show the success message
    function confirmAndDelete(link, event) {
        if (confirm("Are you sure you want to delete this product?")) {
            // Continue with the deletion by navigating to the Delete action
            // The "onclick" event is temporarily removed to prevent multiple confirmations
            link.removeAttribute("onclick");

            // Handle the deletion using the link's "href" attribute
            var deleteUrl = link.getAttribute("href");
            $.post(deleteUrl)
                .done(function () {
                    // Show the "Deleted successfully" message
                    $("#deleteSuccessMessage").show();
                    // Hide the row containing the deleted product
                    $(link).closest("tr").hide();
                })
                .fail(function () {
                    alert("Error: Unable to delete the product.");
                    // Restore the "onclick" event in case of failure
                    link.setAttribute("onclick", "confirmAndDelete(this, event);");
                });

            // Prevent the default link navigation
            event.preventDefault();
        }
    }

    // Attach event listener to the product filter input field
    $("#productFilter").on("input", function () {
        var filterText = $(this).val().toLowerCase();
        var productsFound = false;

        // Show/hide table rows based on the filter text
        $("tbody tr").each(function () {
            var productName = $(this).find("td:nth-child(2)").text().toLowerCase();
            var productDescription = $(this).find("td:nth-child(3)").text().toLowerCase();
            var productPrice = $(this).find("td:nth-child(4)").text().toLowerCase();

            var matched = productName.indexOf(filterText) !== -1 || productDescription.indexOf(filterText) !== -1 || productPrice.indexOf(filterText) !== -1;

            if (matched) {
                $(this).show();
                productsFound = true;
            } else {
                $(this).hide();
            }

        });

        // Show/hide "No product found" message and the table
        if (productsFound) {
            $("#noProductFoundMessage").hide();
            $("#productTable").show();
        } else {
            $("#noProductFoundMessage").show();
            $("#productTable").hide();
        }
    });
</script>

